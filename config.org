#+TITLE: Configuración de Emacs
#+OPTIONS: num:nil

* Basic Configuration
Configuración y preferencias básicas de usuario.
#+begin_src emacs-lisp
  (setq user-full-name (getenv "USER_NAME"))
  (setq user-mail-address (getenv "USER_EMAIL"))
  (prefer-coding-system 'utf-8-unix)
#+end_src

* Package Management & start up
** Repositorios
Establece los repositorios que Emacs usará para descargar e instalar
los paquetes.

#+begin_src emacs-lisp
  (setq package-archives
    '(("gnu" . "https://elpa.gnu.org/packages/")
      ("melpa" . "https://melpa.org/packages/")
      ("nongnu" . "https://elpa.nongnu.org/nongnu/")
      ("melpa-stable" . "https://stable.melpa.org/packages/")))
  (setq package-archive-priorities
  '(("gnu" . 10)
    ("melpa" . 8)
    ("nongnu" . 4)
    ("melpa-stable" . 0)))
#+end_src

** use-package
Carga use-package, el cual sirve para gestionar la descarga y
configuración de paquetes de una manera mas fácil y automatizada, en
caso de que no esté instalado se encarga de descargarlo y cargarlo para su uso.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+end_src

** straight
Carga straight el cual es similar a use package, la diferencia es que
nos permite instalar paquetes desde github.

#+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name
            "straight/repos/straight.el/bootstrap.el"
            (or (bound-and-true-p straight-base-dir)
                user-emacs-directory)))
          (bootstrap-version 7))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  (setq straight-cache-autosync nil)  ;; Desactiva la sincronización automática
  (setq straight-repository-branch "master") ;; Usar siempre una rama estable
  (setq straight-vc-git-default-clone-depth 1) ;; Clonar solo el último commit

#+end_src

** custom-file
Define el archivo donde Emacs guardará la configuración generada por
el.

#+begin_src emacs-lisp
  (setq custom-file "~/.config/emacs/custom.el")
  (load custom-file 'noerror)
#+end_src

** Actualización automática
Programa la actualización automática cada 7 días.

#+begin_src emacs-lisp
  (use-package auto-package-update
    :ensure t
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    (auto-package-update-delete-old-versions t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

* Core
** Inicio
*** indent-tabs-mode
Establece que se utilicen espacios en lugar de tabs

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

*** tab-width
Establece el largo de las tabulaciones a 2 caracteres

#+begin_src emacs-lisp
  (setq-default tab-width 2)
#+end_src

*** startup-screen
Desactiva la pantalla de inicio de emacs

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

*** menu-bar
Desactiva la barra de menú.

#+begin_src emacs-lisp
  (menu-bar-mode 0)
#+end_src

*** tooltip-mode
Muestra los Tool Tips en la echo area

#+begin_src emacs-lisp
  (tooltip-mode -1)
  (setq tooltip-use-echo-area t)
#+end_src

*** hl-line-mode
Resalta la línea actual.

#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src

*** fill-column
Establece el valor por defecto del fill-column a 80 caracteres.
#+begin_src emacs-lisp
  (setq-default fill-column 70)
#+end_src

*** truncate-lines
Para que no haga auto-wrap en las lineas que sobresalgan de la  
pantalla, en cambio las deja salir de la misma.

#+begin_src emacs-lisp
  (setq-default truncate-lines t)
#+end_src

*** exec-path-from-shell
Permite usar el exec path de la shell de OS X o Linux
dentro de Emacs.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t)

  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+end_src

*** Line-numbers
Muestra la posición de linea y columna en la mode-line.

#+begin_src emacs-lisp
  (setq column-number-mode t)
#+end_src

Activa la columna de números y muestra la posición relativa en la
misma.

#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t)
#+end_src

*** ring-bell
Desactiva la campana.

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

*** fringe-style
Ajusta las franjas de los lados del buffer.

#+begin_src emacs-lisp
  (set-fringe-style 5)
#+end_src

*** scroll-bar
Desactiva las barras de desplazamiento.

#+begin_src emacs-lisp
  (set-scroll-bar-mode nil)
#+end_src

*** tool-bar
Desactiva barras de desplazamiento.

#+begin_src emacs-lisp
  (tool-bar-mode 0)
#+end_src

*** pixel-scroll
Activa el desplazamiento suave.

#+begin_src emacs-lisp
  (pixel-scroll-precision-mode 1)
#+end_src

*** disable-mouse
Paquete para desactivar el uso del mouse dentro de Emacs.
 
#+begin_src emacs-lisp
  (use-package disable-mouse
    :ensure t
    :config
    (global-disable-mouse-mode))
#+end_src

*** backup-file
Desactiva las backup-files para que no cree archivos con la
terminación "~" por defecto.

#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src

*** yes-or-no
hace que en lugar de tener que escribir yes o no para aceptar o
declinar una acción, podamos escribir simplemente y o n.

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** which-key
Instala un paquete que nos muestra las posibles opciones para
completar un atajo al momento de iniciar el mismo.

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src

** Font
Usa FiraCode Nerd Font como fuente y establece el como se muestra la misma.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :family "FiraCode Nerd Font"
                      :height 110
                      :weight 'medium
                      :width 'normal)
  (setq master-font-family "FiraCode Nerd Font")
#+end_src

Activa las ligaduras de la fuente.

#+begin_src emacs-lisp
  (use-package ligature
  :ensure t
  :config
  (ligature-set-ligatures 'prog-mode
        '(
        ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
        (";" (rx (+ ";")))
        ("&" (rx (+ "&")))
        ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
        ("?" (rx (or ":" "=" "\." (+ "?"))))
        ("%" (rx (+ "%")))
        ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]" "-" "=" ))))
        ("\\" (rx (or "/" (+ "\\"))))
        ("+" (rx (or ">" (+ "+"))))
        (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
        ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!" "="))))
        ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
        ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
        ("*" (rx (or ">" "/" ")" (+ "*"))))
        ("w" (rx (+ "w")))
        ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!" "-"  "/" "|" "="))))
        (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
        ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_" (+ "#"))))
        ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
        ("_" (rx (+ (or "_" "|"))))
        ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
        "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
        "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
  (global-ligature-mode t))
#+end_src

* Theme
** Instalación
Instalación de temas.

#+begin_src emacs-lisp
  (use-package darktooth-theme
    :ensure t
    :defer t)
  (use-package creamsody-theme
    :ensure t
    :defer t)
  (use-package kaolin-themes
    :ensure t
    :defer t)
  (use-package dracula-theme
  :ensure t
  :defer t)
#+end_src

Desactiva todos los otros temas activos para evitar que se superpongan.

#+begin_src emacs-lisp
  (mapc #'disable-theme custom-enabled-themes)
#+end_src

Define el tema a cargar.

#+begin_src emacs-lisp
  (load-theme 'kaolin-ocean)
#+end_src

Modifica algunos colores predeterminados del tema.

# para ver las configuraciones de las faces: M-x describe-face RET
#+begin_src emacs-lisp
  (custom-theme-set-faces
   'kaolin-ocean
   '(whitespace-trailing ((t (:background "#3C3836" :foreground "#cd5c60"))))
   '(whitespace-space ((t (:background unspecified :foreground "#545c5e")))))
#+end_src

Activa el tema para aplicar los cambios en las custom faces.

#+begin_src emacs-lisp
  (enable-theme 'kaolin-ocean)
#+end_src

** mode-line
Hace que el mode-line muestre solo el major mode.

#+begin_src emacs-lisp
  (setq-default mode-line-format '("%e" mode-line-front-space
                                   (:propertize
                                    ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)
                                    display
                                    (min-width
                                     (5.0)))
                                   mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position
                                   (vc-mode vc-mode)
                                   "  " mode-name " " mode-line-misc-info mode-line-end-spaces))
#+end_src

* Window
Hace que al agregar o eliminar una ventana las otras se acomoden
automáticamente distribuyendo el espacio.

#+begin_src emacs-lisp
  (setf window-combination-resize t)
#+end_src

* Buffers de texto


** Spell checker
Instala y configura jinx, un paquete para la corrección de texto es
emacs.

#+begin_src emacs-lisp
  (use-package jinx
    :ensure t
    :hook ((text-mode . jinx-mode)
           (org-mode . jinx-mode))
    :bind (("M-$" . jinx-correct)
           ("M-P" . jinx-previous)
           ("M-N" . jinx-next))
    :custom
    (jinx-languages "en_US es")
    :config
    (add-to-list 'vertico-multiform-categories
                 '(jinx grid (vertico-grid-annotate . 20))))
#+end_src

** Org
Configura las opciones por defecto en los archivos de tipo Org e
instala org-contrib el cual nos brinda add-ons para org-mode.

Mucha de la siguiente configuración se basa en el siguiente [[https://www.labri.fr/perso/nrougier/GTD/index.html][artículo]].

#+begin_src emacs-lisp
  (use-package org
    :ensure org-contrib
    :config

    (setq org-todo-keyword-faces
          '(("DOING" . "yellow")))

    (setq org-enforce-todo-dependencies t)

    (defun org-summary-todo (n-done n-not-done)
      "Switch entry to DONE when all subentries are done, to TODO otherwise."
      (let (org-log-done org-todo-log-states)   ; turn off logging
        (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

    (add-hook 'org-after-todo-statistics-hook #'org-summary-todo)

    (setq org-agenda-time-grid
          '((daily today require-timed remove-match)
            (800 2000)
            " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))

    (setq org-directory "~/org/")
    (setq org-agenda-files (list "inbox.org" "agenda.org"))

    (setq org-capture-templates
          `(("i" "Inbox" entry  (file "inbox.org")
             ,(concat "* TODO %?\n"
                      "/Entered on/ %U"))
            ("m" "Meeting" entry  (file+headline "agenda.org" "Future")
             ,(concat "* %? :meeting:\n"
                      "<%<%Y-%m-%d %a %H:00>>"))
            ("n" "Note" entry  (file "notes.org")
             ,(concat "* Note (%a)\n"
                      "/Entered on/ %U\n" "\n" "%?"))))

    (setq org-agenda-hide-tags-regexp ".")

    (setq org-agenda-prefix-format
          '((agenda . " %i %-12:c%?-12t% s")
            (todo   . " ")
            (tags   . " %i %-12:c")
            (search . " %i %-12:c")))

    (setq org-ellipsis " ▾")
    (setq calendar-date-style 'european)
    (setq calendar-week-start-day 1)

    (setq fill-column 80)
    (setq org-image-actual-width '(300))

    (define-key global-map (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c a") 'org-agenda)

    (global-set-key (kbd "C-c o i") (lambda () (interactive) (find-file "~/org/inbox.org")))
    (global-set-key (kbd "C-c o a") (lambda () (interactive) (find-file "~/org/agenda.org")))
    (global-set-key (kbd "C-c o n") (lambda () (interactive) (find-file "~/org/notes.org")))

    (add-hook 'org-mode-hook 'visual-line-mode)
    (add-hook 'org-mode-hook 'electric-pair-mode)
    (add-hook 'org-mode-hook 'auto-fill-mode)
    (add-hook 'org-mode-hook 'org-indent-mode))
#+end_src

** Org-bullets
Instala y configura un paquete para mostrar bullets en los archivos org.

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))
#+end_src

** Org-Roam
Instala y configura Org-Roam, un paquete que sirve para tomar notas
utilizando el método Zettelkasten.

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/roam_notes")
    (org-roam-completion-everywhere t)
    (org-roam-dailies-capture-templates
     '(("d" "default" entry "* %<%I:%M %p>: %?"
        :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
    (org-roam-capture-templates
     '(("a" "Author" plain "\n\n%?"
        :if-new (file+head "resources/authors/%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n#+filetags: author")
        :unnarrowed t)

       ("s" "Source")

       ("sv" "Video" plain "#+url: %?\n* Resumen\n\n* Author: \n"
        :if-new (file+head "resources/sources/%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n#+filetags: sources\n#+type: Video")
        :unnarrowed t)

       ("sb" "Book" plain "* Resumen\n%?\n\n* Author:\n"
        :if-new (file+head "resources/sources/%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n#+filetags: sources\n#+type: Book\n#+year: ${year}")
        :unnarrowed t)

       ("sp" "Podcast" plain "* Resumen\n%?\n\n* Host:\n"
        :if-new (file+head "resources/sources/%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n#+filetags: sources\n#+type: Podcast")
        :unnarrowed t)

       ("sm" "Movie" plain "* Resumen\n%?\n\n* Director:\n"
        :if-new (file+head "resources/sources/%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n#+filetags: sources\n#+type: Movie\n#+year: ${year}")
        :unnarrowed t)

       ("sc" "Comic" plain "* Resumen\n%?\n\n* Author:\n"
        :if-new (file+head "resources/sources/%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n#+filetags: sources\n#+type: Comic")
        :unnarrowed t)

       ("sa" "Article" plain "#+url: %?\n* Resumen\n\n* Author:\n"
        :if-new (file+head "resources/sources/%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n#+filetags: sources\n#+type: Article\n#+publication: ${publication}\n#+date: ${date}")
        :unnarrowed t)

       ("sw" "Website" plain "#+url: %?\n* Resumen\n\n* Author: \n"
        :if-new (file+head "resources/sources/%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n#+filetags: sources\n#+type: Website")
        :unnarrowed t)

       ("e" "Extract" plain "* Cita\n%?\n\n* Contexto\n\n* Source\n"
        :if-new (file+head "resources/quotes/%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n#+filetags: quote inbox ${other_tags}\n#+reference: ${reference}")
        :unnarrowed t)

       ("z" "Zettel" plain "* Idea principal\n%?\n* Conexiones\n\n* Referencias"
        :if-new (file+head "zettelkasten/%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n#+filetags: permanent")
        :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode))
#+end_src

** Org-Roam-UI
Instala las dependencias de org-roam-ui.

#+begin_src emacs-lisp
  (use-package websocket
    :ensure t)

  (use-package simple-httpd
    :ensure t)

  (use-package f
    :ensure t)
#+end_src

Instala y configura org-roam-ui.

#+begin_src emacs-lisp
  (use-package org-roam-ui
    :ensure t
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start nil))
#+end_src

** Markdown-Mode
Instala y configura el paquete markdown-mode, el cual nos proporciona
un modo para trabajar en markdown.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown")
    :bind (:map markdown-mode-map
                ("C-c C-e" . markdown-do)))
#+end_src

* Minibuffer
** subword-mode
Inicia el subword-mode al arrancar el minibuffer.

#+begin_src emacs-lisp
  (add-hook 'minibuffer-mode-hook 'subword-mode)
#+end_src

** Vertico
*** Instalación
Descarga y arranca Vertico, el cual es un paquete que nos brinda
auto-completado al utilizar comandos que utilicen el minibuffer.

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    :config
    (vertico-multiform-mode)
    (setq vertico-multiform-commands
          '((dmenu flat)
            ))
    (setq vertico-multiform-categories
      '((file grid)
        (consult-grep buffer))))
#+end_src

*** savehist
Descarga y activa savehist, este paquete ordena las opciones del
minibuffer de acuerdo a su historial de uso.

#+begin_src emacs-lisp
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))
#+end_src

*** Marginalia
Agrega y activa Marginalia, el cual agrega información sobre las
opciones de Vertico.

#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

*** Embark
descarga e activa Embark, el cual es un paquete que nos brinda un
comando dependiendo del elemento que selecciona el cursor.

#+begin_src emacs-lisp
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)
     ("M-." . embark-dwim)
     ("C-h B" . embark-bindings))
    :init
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
#+end_src

* Search
** Incremental Search
Agrega el conteo de ocurrencias al usar el incremental search

#+begin_src emacs-lisp
  (setq isearch-lazy-count t)
#+end_src

** Orderless
Permite que diversas OO puedan utilizar el estilo de auto-completado
orderless.

#+begin_src emacs-lisp
  (use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Consult
*** Instalación
Descarga y activa consult, el cual nos permite hacer búsquedas mas
potentes ademas de potenciar algunas funciones.

#+begin_src emacs-lisp
  (use-package consult
    ;; Replace bindings. Lazily loaded by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c h" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)
           ("C-x b" . consult-buffer)
           ("C-x 4 b" . consult-buffer-other-window)
           ("C-x 5 b" . consult-buffer-other-frame)
           ("C-x t b" . consult-buffer-other-tab)
           ("C-x r b" . consult-bookmark)
           ("C-x p b" . consult-project-buffer)
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)
           ("M-g g" . consult-goto-line)
           ("M-g M-g" . consult-goto-line)
           ("M-g o" . consult-outline)
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)
           ("M-s e" . consult-isearch-history)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)
           ("M-r" . consult-history))

    :hook (completion-list-mode . consult-preview-at-point-mode)

    :init
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    (advice-add #'register-preview :override #'consult-register-window)

    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    :config
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     :preview-key '(:debounce 0.4 any))

    (setq consult-narrow-key "<")
    (add-to-list 'consult-buffer-filter "\\`\\*.*\\*\\'"))
#+end_src

*** embark-consult
Descarga y agrega embark-consult, este paquete agrega la funcionalidad
de Embark a las búsquedas con Consult.

#+begin_src emacs-lisp
  (use-package embark-consult
  :ensure t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Grep
Configura grep para que no busque en una lista de capetas y una lista
de archivos.

#+begin_src emacs-lisp
  (use-package grep
    :config
    (setq grep-find-ignored-directories
          (append
           (list
            ".git"
            ".hg"
            ".idea"
            ".project"
            ".settings"
            ".svn"
            "bootstrap*"
            "pyenv"
            "target"
            "node_modules"
            "target"
            ".mvn"
            )
           grep-find-ignored-directories))
    (setq grep-find-ignored-files
          (append
           (list
            "*.blob"
            ".factorypath"
            "*.gz"
            "*.jar"
            "*.xd"
            "TAGS"
            "dependency-reduced-pom.xml"
            "projectile.cache"
            "workbench.xml"
            "mvnw"
            "mvnw.cmd"
            )
           grep-find-ignored-files)))
#+end_src

* Version Control
** log messages
Activa el uso de flyspell a la hora de editar los message log

#+begin_src emacs-lisp
  (add-hook 'log-edit-hook (lambda () (jinx-mode)))
#+end_src

** Magit
Descarga y configura Magit el cual es un paquete que nos permite
manejar git desde Emacs

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-log-arguments '("-n256" "--graph" "--decorate" "--color")
          magit-diff-refine-hunk t))
#+end_src

*** Nota
Para que almacenar localmente el =personal access token= es necesaria
la siguiente configuración global:
#+begin_src zsh
  git config --global credential.helper store
#+end_src

** git-gutter
Instala un paquete que nos brinda información sobre git en nuestro
buffer.

#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :ensure t
    :config
    (global-git-gutter-mode t)
    (setq git-gutter-fr:side 'right-fringe)
    ;; Move between local changes
    (global-set-key (kbd "M-<up>") 'git-gutter:previous-hunk)
    (global-set-key (kbd "M-<down>") 'git-gutter:next-hunk))
#+end_src

** Ghub
paquete que nos permite hacer request a diferentes servicios de
almacenamiento de repositorios.

#+begin_src emacs-lisp
  (use-package ghub
    :ensure t
    :config
    (setq auth-sources '("~/.authinfo")))
#+end_src

# ** Forge
# Forge es un paquete que nos permite trabajar con los Git forges.

# #+begin_src emacs-lisp
#   (use-package forge
#     :ensure t)
# #+end_src

* Terminal
** vterm
Instala una muy buena terminal.

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :config
    (global-set-key (kbd "C-c x") 'vterm))
#+end_src

* Dired
** dired-git
Instala el soporte para git en dired.

#+begin_src emacs-lisp
  (use-package dired-git
    :ensure t)
#+end_src

* LSP
** Core
*** whitespace-mode
Muestra indicadores de los espacios.

#+begin_src emacs-lisp
  (setq whitespace-style '(face spaces trailing space-mark tab-mark))
  (add-hook 'prog-mode-hook 'whitespace-mode)
#+end_src

*** flymake-diagnostic-at-point
Instala flymake-diagnostic-at-point el cual es un paquete que nos
muestra los errores al hacer hover sobre el mismo.

#+begin_src emacs-lisp
  (use-package flymake-diagnostic-at-point
    :ensure t
    :after flymake
    :config
    (add-hook 'flymake-mode-hook #'flymake-diagnostic-at-point-mode))
#+end_src

*** Tree-sitter
Configura la descarga de los grammar para treesitter.

#+begin_src emacs-lisp
  (use-package treesit
    :preface
    (defun cz/setup-install-grammars ()
        "Install Tree-sitter grammars if they are absent."
        (interactive)
        (dolist (grammar
                 '((css . ("https://github.com/tree-sitter/tree-sitter-css" "v0.20.0"))
                   (java . ("https://github.com/tree-sitter/tree-sitter-java"))
                   (bash "https://github.com/tree-sitter/tree-sitter-bash")
                   (html . ("https://github.com/tree-sitter/tree-sitter-html" "v0.20.1"))
                   (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" "v0.21.2" "src"))
                   (json . ("https://github.com/tree-sitter/tree-sitter-json" "v0.20.2"))
                   (python . ("https://github.com/tree-sitter/tree-sitter-python" "v0.20.4"))
                   (go "https://github.com/tree-sitter/tree-sitter-go" "v0.20.0")
                   (markdown "https://github.com/ikatyang/tree-sitter-markdown")
                   (make "https://github.com/alemuller/tree-sitter-make")
                   (elisp "https://github.com/Wilfred/tree-sitter-elisp")
                   (cmake "https://github.com/uyha/tree-sitter-cmake")
                   (c "https://github.com/tree-sitter/tree-sitter-c")
                   (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
                   (toml "https://github.com/tree-sitter/tree-sitter-toml")
                   (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "tsx/src"))
                   (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "typescript/src"))
                   (yaml . ("https://github.com/ikatyang/tree-sitter-yaml" "v0.5.0"))
                   (prisma "https://github.com/victorhqc/tree-sitter-prisma")))
          (add-to-list 'treesit-language-source-alist grammar)
          (unless (treesit-language-available-p (car grammar))
            (treesit-install-language-grammar (car grammar)))))
    :config
    (cz/setup-install-grammars))
#+end_src

*** YASnippet
Instala el paquete que nos permitirá usar snippets a la hora de
programar.

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (setq yas/root-directory '("~/.config/emacs/snippets")
          yas-indent-line 'fixed))
  (yas-global-mode 1)
#+end_src

*** lsp-bridge
Configura lsp-bridge, el cual es un cliente LSP.

#+begin_src emacs-lisp
  (use-package lsp-bridge
  :straight '(lsp-bridge :type git :host github :repo "manateelazycat/lsp-bridge"
            :files (:defaults "*.el" "*.py" "acm" "core" "langserver" "multiserver" "resources")
            :build (:not compile))
  :init
  (global-lsp-bridge-mode)
  :bind(:map lsp-bridge-mode-map
             ("C-c f d" . lsp-bridge-find-def)
             ("C-c f t" . lsp-bridge-find-type-def)
             ("C-c f i" . lsp-bridge-find-impl)
             ("C-c f r" . lsp-bridge-find-references)
             ("C-c f b" . lsp-bridge-find-def-return)
             ("C-c f D" . lsp-bridge-find-def-other-window)
             ("C-c f T" . lsp-bridge-find-type-def-other-window)
             ("C-c f I" . lsp-bridge-find-impl-other-window)
             ("C-c l d" . lsp-bridge-popup-documentation)
             ("C-c l V" . lsp-bridge-popup-documentation-scroll-up)
             ("C-c l v" . lsp-bridge-popup-documentation-scroll-down)
             ("C-c l r" . lsp-bridge-rename)
             ("M-p" . flymake-goto-prev-error)
             ("M-n" . flymake-goto-next-error)
             ("C-c l a" . lsp-bridge-code-action)
             ("C-c l s" . lsp-bridge-restart-process)
             ("C-c l p" . lsp-bridge-peek)
             ("C-c l P" . lsp-bridge-peek-through))
  :custom
  (lsp-bridge-enable-hover-diagnostic nil)
  (lsp-brdige-enable-diagnostic-enable-overlays nil)
  (lsp-bridge-enable-completion-in-string t)
  (acm-enable-codeium nil)
  (acm-enable-preview t)
  (acm-enable-quick-access t))
#+end_src

*** flymake-bridge
Agrega el backend de lsp-bridge a flymake, esto por preferencia
personal.

#+begin_src emacs-lisp
  (use-package flymake-bridge
    :straight (flymake-bridge :type git :host github :repo "liuyinz/flymake-bridge")
    :after lsp-bridge
    :config
    (add-hook 'lsp-bridge-mode-hook #'flymake-bridge-setup))
#+end_src
*** lsp-bridge-tabs
Cambia los tabs por spaces del buffer después de ejecutar un code
action.

#+begin_src emacs-lisp
  (defun cz/replace-tabs-with-spaces ()
    "Replace all tabs in the buffer with spaces based on the current value of `tab-width`."
    (interactive)
    (let ((tab-width (or tab-width 4)))
      (save-excursion
        (goto-char (point-min))
        (while (search-forward "\t" nil t)
          (replace-match (make-string tab-width ?\s) nil t)))))

  (add-hook 'before-save-hook 'cz/replace-tabs-with-spaces)
#+end_src
** Java
*** lombok
Configura lombok para que sea usado por lsp-bridge.

#+begin_src emacs-lisp
  (require 'lsp-bridge-jdtls)
  (setq lsp-bridge-enable-auto-import t)
  (setq lsp-bridge-jdtls-jvm-args (list (format "-javaagent:%s/.m2/repository/org/projectlombok/lombok/1.18.34/lombok-1.18.34.jar" (getenv "USER_HOME"))))
#+end_src

*** devdocs
Establece las documentaciones por default en los buffers de java.

#+begin_src emacs-lisp
  (add-hook 'java-ts-mode-hook
          (lambda () (setq-local devdocs-current-docs '("openjdk~8" "spring_boot"))))
#+end_src
*** tree-sitter
Cambia el java-mode por el java-ts-mode en los archivos java, esto
para utilizar las ventajas que nos brinda treesit.

#+begin_src emacs-lisp
  (add-hook 'java-mode-hook 'java-ts-mode)
#+end_src

*** Estilo
Configura el estilo que utilizara java.

#+begin_src emacs-lisp
  (defun java-style ()
    (setq java-ts-mode-indent-offset tab-width)

    ;;Activar la flag (setq treesit--indent-verbose t) para ver que regla de indentación se está aplicando.
    ;;Usar el minor mode (treesit-inspect-mode) para saber el nombre del nodo at-point.
    (defun cz/java-indent-rules ()
      `((java
         ((and (parent-is "lambda_expression") (node-is "block"))
          parent-bol 0)
         ((n-p-gp "}" "block" "lambda_expression")
          parent-bol 0)
         ((n-p-gp nil "block" "lambda_expression")
          parent-bol java-ts-mode-indent-offset)
        ((parent-is "variable_declarator") parent-bol ,(* java-ts-mode-indent-offset 2))
        ((parent-is "method_invocation") parent-bol ,(* java-ts-mode-indent-offset 2))
        ((parent-is "lambda_expression") parent-bol ,(* java-ts-mode-indent-offset 2))
        ((parent-is "binary_expression") parent-bol ,(* java-ts-mode-indent-offset 2))
        ((parent-is "argument_list") parent-bol ,(* java-ts-mode-indent-offset 2))
        ((parent-is "formal_parameters") parent-bol ,(* java-ts-mode-indent-offset 2))
        ((parent-is "type_parameters") parent-bol ,(* java-ts-mode-indent-offset 2))
        ((parent-is "method_reference") parent-bol ,(* java-ts-mode-indent-offset 2))
        ((parent-is "catch_type") parent-bol ,(* java-ts-mode-indent-offset 2))
        ((parent-is "type_bound") parent-bol ,(* java-ts-mode-indent-offset 2))
        ((parent-is "multiline_string_fragment") parent-bol ,(* java-ts-mode-indent-offset 2))
        ((parent-is "string_literal") parent-bol ,(* java-ts-mode-indent-offset 2))

        ,@(alist-get 'java java-ts-mode--indent-rules))))

    (setq-local treesit-simple-indent-rules (cz/java-indent-rules)))

  (add-hook 'java-ts-mode-hook 'java-style)
#+end_src

*** Inicio
Configura las funciones que inician con java.

#+begin_src emacs-lisp
  (defun start-java-modes ()
    (set-fill-column 100)
    (display-fill-column-indicator-mode)
    (rainbow-delimiters-mode)
    (flymake-mode)
    (eldoc-mode)
    (subword-mode)
    (electric-pair-mode))

  (add-hook 'java-ts-mode-hook 'start-java-modes)
#+end_src

** Comandos personalizados
*** create-java-test-file
Crea una función que genera el archivo de test en java del archivo
actual.

#+begin_src emacs-lisp
  (defun cz/create-java-test-file ()
    "Create the corresponding test file for the current Java file."
    (interactive)
    (let* ((file-name (buffer-file-name))
           (test-file-name (and file-name
                                (replace-regexp-in-string
                                 "/src/main/java/"
                                 "/src/test/java/"
                                 (replace-regexp-in-string
                                  "\\.java$"
                                  "Test.java"
                                  file-name)))))
      (if test-file-name
          (progn
            (make-directory (file-name-directory test-file-name) t)
            (write-region "" nil test-file-name)
            (message "Test file created: %s" test-file-name)
            (find-file test-file-name))
        (error "Buffer not visiting a file or not a Java file"))))

  (global-set-key (kbd "C-c l t") 'cz/create-java-test-file)
#+end_src
** JSON
*** tree-sitter
Cambia el js-json-mode por el json-ts-mode en los archivos JSON, esto
para utilizar las ventajas que nos brinda treesit.

#+begin_src emacs-lisp
  (add-hook 'js-json-mode-hook 'json-ts-mode)
#+end_src

*** Estilo
Configura el estilo que utilizara JSON.

#+begin_src emacs-lisp
    (defun json-style ()
      (setq json-ts-mode-indent-offset tab-width))

    (add-hook 'json-ts-mode-hook 'json-style)
#+end_src
*** Inicio
Configura las funciones que inician con JSON.

#+begin_src emacs-lisp
  (defun start-json-modes ()
    (set-fill-column 70)
    (display-fill-column-indicator-mode)
    (rainbow-delimiters-mode)
    (flymake-mode)
    (eldoc-mode)
    (subword-mode)
    (electric-pair-mode))

  (add-hook 'json-ts-mode-hook 'start-json-modes)
#+end_src

** XML
*** Configuración Eglot
Establece la configuración de eglot al iniciar XML.

#+begin_src emacs-lisp
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '(nxml-mode . (format "%s/.lsp-servers/lemminx/lemminx-linux" (getenv "USER_HOME")))))
#+end_src

*** Estilo
Configura el estilo que utilizara XML.

#+begin_src emacs-lisp
  (defun xml-style ()
    (setq tab-width 4)
    (setq nxml-child-indent tab-width))

  (add-hook 'nxml-mode-hook 'xml-style)
#+end_src

*** Inicio
Configura las funciones que inician con XML.

#+begin_src emacs-lisp
  (defun start-xml-modes ()
    (set-fill-column 70)
    (display-fill-column-indicator-mode)
    (rainbow-delimiters-mode)
    (flymake-mode)
    (eldoc-mode)
    (subword-mode)
    (electric-pair-mode))

  (add-hook 'nxml-mode-hook 'start-xml-modes)
#+end_src

** YAML
*** tree-sitter
Cambia el yaml-mode por el yaml-ts-mode en los archivos YAML, esto
para utilizar las ventajas que nos brinda treesit.

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.yml?\\'" . yaml-ts-mode))
#+end_src

*** Estilo
Configura el estilo que utilizara YAML.

#+begin_src emacs-lisp
  (defun yaml-style ()
    (setq tab-width 4))

  (add-hook 'yaml-ts-mode-hook 'yaml-style)
#+end_src

*** Inicio
Configura las funciones que inician con YAML.

#+begin_src emacs-lisp
  (defun start-yaml-modes ()
    (set-fill-column 70)
    (display-fill-column-indicator-mode)
    (rainbow-delimiters-mode)
    (flymake-mode)
    (eldoc-mode)
    (subword-mode)
    (electric-pair-mode))

  (add-hook 'yaml-ts-mode-hook 'start-yaml-modes)
#+end_src

** HTML
*** html-web-mode
Cambia el mhtml-mode por un modo creado a partir de web-mode en los archivos HTML.

#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :pin melpa-stable
    :commands web-mode)

  (define-derived-mode html-web-mode web-mode "HTML"
    "A major mode based on web-mode for HTML files.")

  (add-to-list 'auto-mode-alist '("\\.html?\\'" . html-web-mode))
#+end_src

*** Estilo
Configura el estilo que utilizara HTML.

#+begin_src emacs-lisp
  (defun html-style ()
    (setq web-mode-markup-indent-offset tab-width)
    (setq web-mode-code-indent-offset tab-width)
    (setq web-mode-css-indent-offset tab-width)
    (setq web-mode-sql-indent-offset tab-width)
    (setq web-mode-indent-style tab-width))
  (add-hook 'html-web-mode-hook 'html-style)
#+end_src

*** Inicio
Configura las funciones que inician con HTML.

#+begin_src emacs-lisp
  (defun start-html-modes ()
    (set-fill-column 80)
    (display-fill-column-indicator-mode)
    (eldoc-mode)
    (electric-pair-mode)
    (emmet-mode)
    (flymake-mode)
    (subword-mode)
    (rainbow-delimiters-mode))

  (add-hook 'html-web-mode-hook 'start-html-modes)
#+end_src
** CSS
*** tree-sitter
Cambia el css-mode por css-ts-mode en los archivos CSS, esto para
utilizar las ventajas que nos brinda tressit.

#+begin_src emacs-lisp
  (add-hook 'css-mode-hook 'css-ts-mode)
#+end_src

*** Estilo
Configura el estilo que utilizara CSS.

#+begin_src emacs-lisp
  (defun css-style ()
    (setq tab-width 4))

  (add-hook 'css-ts-mode-hook 'css-style)
#+end_src

*** Inicio
Configura las funciones que inician con CSS.

#+begin_src emacs-lisp
  (defun start-css-modes ()
    (set-fill-column 70)
    (display-fill-column-indicator-mode)
    (eldoc-mode)
    (electric-pair-mode)
    (flymake-mode)
    (subword-mode)
    (rainbow-delimiters-mode))

  (add-hook 'css-ts-mode-hook 'start-css-modes)
#+end_src

** JS, TS, JSX, TSX
*** code-web-mode
Crea un modo personalizado a base de web-mode para trabajar con los
archivos de JavaScript, TypeScript y React

#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :pin melpa-stable
    :commands web-mode)

  (define-derived-mode code-web-mode web-mode "Code"
    "A major mode based on web-mode for JS/TS/JSX/TSX files.")

  (add-to-list 'auto-mode-alist '("\\.js?\\'" . code-web-mode))
  (add-to-list 'auto-mode-alist '("\\.mjs?\\'" . code-web-mode))
  (add-to-list 'auto-mode-alist '("\\.cjs?\\'" . code-web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . code-web-mode))
  (add-to-list 'auto-mode-alist '("\\.ts?\\'" . code-web-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . code-web-mode))
#+end_src

*** add-node-modules-path
Instala un paquete que agrega los bin de nuestro proyecto actual de
node al excec_path de Emacs.

#+begin_src emacs-lisp
  (use-package add-node-modules-path
    :ensure t
    :custom
    (add-node-modules-path-command '("echo \"$(npm root)/.bin\"")))
#+end_src

*** Flymake-eslint
Instala el soporte para eslint en flymake.

#+begin_src emacs-lisp
    (use-package flymake-eslint
      :ensure t)
#+end_src

*** Estilo
Configura el estilo que utilizara web-mode.

#+begin_src emacs-lisp
  (defun code-style ()
  (setq web-mode-markup-indent-offset tab-width)
  (setq web-mode-code-indent-offset tab-width)
  (setq web-mode-css-indent-offset tab-width)
  (setq web-mode-sql-indent-offset tab-width)
  (setq web-mode-indent-style 1)
  (setq web-mode-enable-comment-annotations t)
  (setq web-mode-enable-auto-indentation t)
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-css-colorization t))

  (add-hook 'code-web-mode-hook 'code-style)
#+end_src

*** Inicio
Configura las funciones que inician con web-mode.

#+begin_src emacs-lisp
  (defun start-code-modes ()
    (set-fill-column 80)
    (display-fill-column-indicator-mode)
    (add-node-modules-path)
    (eldoc-mode)
    (flymake-mode)
    (flymake-eslint-enable)
    (electric-pair-mode)
    (emmet-mode)
    (subword-mode)
    (rainbow-delimiters-mode))

  (add-hook 'code-web-mode-hook 'start-code-modes)
#+end_src

** Extras
*** rainbow-delimiters
Instala una extension que pone diferentes colores a los delimitadores
a la hora de programar.

#+begin_src emacs-lisp
      (use-package rainbow-delimiters
        :ensure t)
#+end_src

*** hungry-delete
paquete que nos agrega la opción de eliminar todos los espacios en
blanco en lugar de uno al presionar backspace.

#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :init
    (global-hungry-delete-mode)
    :config
    (setq hungry-delete-join-reluctantly nil))
#+end_src

*** emmet-mode
Instala un minor-mode para poder utilizar emmet en diversos
major-mode.

#+begin_src emacs-lisp
    (use-package emmet-mode
      :ensure t
      :config
      (add-to-list 'emmet-jsx-major-modes 'code-web-mode))
#+end_src

* Comandos Personalizados
** rename-this-buffer-and-file
Cambia el nombre del buffer y archivo actual

#+begin_src emacs-lisp
  (defun cz/rename-this-buffer-and-file ()
         "Renames current buffer and file it is visiting."
         (interactive)
         (let ((filename (buffer-file-name)))
           (if (not (and filename (file-exists-p filename)))
               (message "Buffer is not visiting a file!")
             (let ((new-name (read-file-name "New name: " filename)))
               (cond
                ((vc-backend filename) (vc-rename-file filename new-name))
                (t
                 (rename-file filename new-name t)
                 (rename-buffer new-name)
                 (set-visited-file-name new-name)
                 (set-buffer-modified-p nil)
                 (message
                  "File '%s' successfully renamed to '%s'"
                  filename
                  (file-name-nondirectory new-name))))))))
  (global-set-key (kbd "C-x C-r") 'cz/rename-this-buffer-and-file)
#+end_src
** insert-newline-below
Crea función que inserta una nueva linea abajo sin mover el cursor.

#+begin_src emacs-lisp
  (defun insert-newline-below ()
    "Insert a newline below the current line without moving the cursor or indenting."
    (interactive)
    (save-excursion
      (end-of-line)
      (newline)))

  (global-set-key (kbd "C-<return>") 'insert-newline-below)
#+end_src

** indent-right
Permite agregar sangria a la derecha usando C-<tab>.

#+begin_src emacs-lisp
    (defun cz/indent-right ()
    "Indent the current line or the selected region to the left."
    (interactive)
    (if (region-active-p)
        (let ((start (save-excursion
                       (goto-char (region-beginning))
                       (line-beginning-position)))
              (end (save-excursion
                     (goto-char (region-end))
                     (line-end-position))))
          (indent-rigidly start end tab-width)
          (setq deactivate-mark nil)) ; Mantener la selección activa
      (indent-rigidly (line-beginning-position) (line-end-position) tab-width)))

  (global-set-key (kbd "C-<tab>") 'cz/indent-right)
#+end_src

** indent-left
Permite agregar sangria a la izquierda usando S-<tab>.

#+begin_src emacs-lisp
    (defun cz/indent-left ()
    "Indent the current line or the selected region to the left."
    (interactive)
          (if (region-active-p)
                          (let ((start (save-excursion
                       (goto-char (region-beginning))
                       (line-beginning-position)))
              (end (save-excursion
                                                                           (goto-char (region-en
d))
                                                                           (line-en
d-position))))
          (indent-rigidly start end (- tab-width))
          (setq deactivate-mark nil)) ; Mantener la selección activa
      (indent-rigidly (line-beginning-position) (line-end-position) (- tab-width))))

  (global-set-key (kbd "<backtab>") 'cz/indent-left)
#+end_src

** file-path-to-killring
Agrega la dirección del archivo actual al kill-ring.

#+begin_src emacs-lisp
  (defun cz/file-path-to-killring ()
  "Show the full path to the current file in the minibuffer."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if file-name
        (progn
          (message file-name)
          (kill-new file-name))
      (error "Buffer not visiting a file"))))

  (global-set-key (kbd "C-c z c") 'cz/file-path-to-killring)
#+end_src

* Auto-tangle Configuration Files
Este snippet agrega un hook a los buffers =org-mode= que ejecuta una
función cada vez que el buffer es guardado. Esta función revisa si el
archivo guardado es =config.org= y entonces automáticamente exporta la
configuración aquí a los archivos output asociados.

#+begin_src emacs-lisp
  ;; Automatically tangle our config.org config file when whe save
  (defun cz/org-babel-tangle-config ()
    (when (or (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name "~/.config/emacs/"))
              (string-equal (file-name-directory (buffer-file-name))
                            (expand-file-name "~/.dotfiles/emacs/")))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'cz/org-babel-tangle-config)))
#+end_src

# Local Variables:
# jinx-local-words: "emacs"
# End:
